exAmour's first env process:

The first env in exAmour is embedded in the kernel in
a special section. This section is part of the kernel
and would allow exAmour to recover from critical errors
(a kind of fake reboot).
In this document, we will refer to this first env as the
bootstrap env.

@A word about the environnement launching process:
exAmour is an exokernel. The job of an exokernel is
to ensure that there is no dangerous behavior on the system.
A dangerous behavior for an exokernel is a behavior from an
env which can affects negatively other envs and eventually
or not crash the computer.
Therefore the computer hasn't to deal with filesystems
and other low level or not abstractions.

In order to ensure that a running env which has been corrupted
won't be able to affect the system or grant some privileges not
planned at launch time, resources access should be bound at creation
time. It would be a good idea if an env could rely on its launcher but
since the launcher is not the kernel but another env such an assumption
would lead to a major security hole.
Two solutions are then possible.

The first one is to wipe out the creation time resources permissions and
allow envs to dynamically modify their resources access permissions.
Therefore, if an env has been corrupted, it would easily raise its permission
level and possibly exploit some holes in the system.
This is exactly what happen in current systems where a corrupted thumbnailer
program can access to the network, various inputs and even the sound system
without any problem...
The first solution seems not to be a good one.

The second solution would be to allow only one access to the resource bound
feature in an env lifetime. Therefore, an env could set its resources by itself
rather than having to rely on its launcher. The latter would then not being able
to decide on the resources policy of the env.
and to ensure that a corrupted env which has forgotten to set its permissions
would not leave a big security hole in the system, this resource bound would has
to be done during the very first instructions of the env. Let's say before any other
syscalls and before the first timer interruption.
The risk of bad use of resources is then very low but time is not left to the env
to probe the system configuration to determine which permissions to grant to itself...
A problem would be if a malicious env is launched on the computer but in this case
the most important is to ensure that this env won't be able to crash the system which
is the jobof the exokernel...

However, even if this model seems to be reliable enough one particular point remains,
the memory model.
Indeed the memory has to be mapped by the launcher in order to allow the new env to run.

The problem is that there is no guarantee that the launcher did something good for the
launched and env rebootstrapping could result in a great waste of time.
Above all, exAmour use lots of upcalls to forward kernel events to their relevant envs
and a launcher has to be aware about the specific upcall routines of the launched to
achieve a good work.
The upcalls can't be redefined dynamically because of security issues.

The solution we use in exAmour is to follow the same policies for upcalls than for
resources definitions which means not at creation time but during the very first
instructions of the env.
About the memory model, every launched env must provide, through its libOS for example,
a special symbol called __init_memory_map which is in charge of the new env's memory mapping.
At the very end of its execution, this function would set a special, libOS/env specific, internal
flag to indicate that it had been successfully excuted and that the memory mapping is correct.
This function takes an examour_uenv_t and a cpu_ctx_t structures in parameters to indicate to the
kernel how to prepare the env for its excution.
To avoid any cheat, this function would be executed inside the kernel create_env syscall and would
be a dynamically compiled function to protect the kernel from malicious code.

According to those mechanisms, the env creation syscall results in a four arguments syscall.
 sys_create_env(char **sections, char **sections_name, int n_sections, void *__init_memory_map);

The first argument is a buffer which contains every sections of the new_env binary.
The second argument is a list of the sections names indexed on the first argument.
The third argument indicates the number of sections.
The fourth argument is the init_memory_map callback which has to be located inside the .code
section of the binary mapping.

To define the resources permissions, the following syscall is used:
 sys_set_resources_access(examour_resource_perm_map_t permissions);

The possible permissions are:
 Memory allocation/deallocation
 Env creation
 Env deletion (only created envs)
 Irq handling (per hardware irq)
 Exception handling (per exception)
 ...
 (Other will come with the driver model)
 
 The default permission map is 0 which means nothing.
 Permission to ask for cpu timeslice is inherent to the env, it is like breathe for human beings.
