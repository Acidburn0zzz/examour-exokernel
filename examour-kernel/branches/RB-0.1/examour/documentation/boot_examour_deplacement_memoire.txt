		** deplacement du noyau dans la memoire **

Quelque que soit le modele memoire employer.

L'environnement de bootstrap connait la taille des structures de
donnees qui gerent l'allocation memoire aussi est il capable de
determiner precisement combien d'octets seront requis en memoire pour
la gerer.

L'idee ici est d'avoir un systeme relativement flexible pour booter le
kernel et son process init via un process de bootstrap qui s'occupera
de la partie dependante du bootloader, de la detection de la quantite
de memoire... enfin des conneries qui peuvent etre degagees de l'image
du noyau mais qui doivent etre realisee au moment du boot.

Initialement, le bootloader va donc charger le bootstrap. Ce dernier
va commencer par determiner quelles sont les capacites de la machine
au niveau memoire.
Comprendre qu'il va verifier que la pagination est presente, detecter
la quantite de memoire physique et enfin determiner combien de place
sera necessaire pour stocker les structures de donnees de la gestion
memoire.
Ensuite il va preparer la memoire pour lancer le kernel a savoir que
si la pagination est dispo, il va l'installer et l'activer histoire de
lancer l'image du noyau deja positionnee en memoire virtuelle haute
(3.5GB).

Le process bootstrap est charge de reserver l'espace memoire pour la
gestion des structures de donnees cela veut dire qu'il va faire
plusieurs choses :
 - Reserver l'espace pour le futur noyau a partir de 1MB.
 - copier respectivement le noyau et le process init a la suite l'un
   de l'autre juste apres cet espace memoire.
 - allouer des pages memoire pour lui a[pres tout cela. Ces pages
   seront utilisees pour mapper le kernel en memoire haute. le process
   init lui n'est pas mapper, ce sera au noyau de faire ce qu'il veut
   avec son adresse physique.

Normalement le process bootstrap se trouve au debut de l'espace
reserver pour la gestion memoire donc il n'est recouvert que lorsque
le noyau configure sa memoire.

Une fois ce minimum fait le process bootstrap peut faire un call sur
le process du noyau qu'il a mapper a 3.5GB.
Le noyau ne doit jamais rendre la main a son main. Il doit commencer
par installer sa gdt, initialiser sa memoire (recouvrement du process
bootstrap) et switcher vers ses propres pages avec ses propres
structures fraichement allouees.
Une fois ceci de fait libre au noyau de charger son idt et de mapper
son process init ou il le souhaite.

Apres la vie suit son cours...

J'espere que ce systeme ne sera pas trop lent ni trop redondant (bien
qu'il le soit deja un peu). Mais ca me semble etre un bon moyen de
gerer un demarrage propre et les detections ne servant qu'une fois
peuvent etre degagee dans un process qui est detruit apres d'ou une
image du noyau plus petite et donc une consommation memoire et une
complexite reduites.

Remy Saissy, le 8 Juin 2006




