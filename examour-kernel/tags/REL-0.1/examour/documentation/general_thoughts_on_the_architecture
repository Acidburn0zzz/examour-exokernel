			** Thoughts on exAmour's architecture **

@ The most basic piece, the environment.
In exAmour, everything is part of an environment, even the kernel itself.
An environment is therefore the most important concept to understand how
the system runs.

Here is a scheme of an environment in order to understand its position in the
system.


	+-----------------------------------------------+
	|		|Environment|			|
	|		+-----------+			|	   
	|	+-------+ --> code			|
	|	|Process| --> stack			|
	|	+-------+ --> data			|
	|						|
	| +-------------------------------------------+ |
	| |		|LibOS|			      | |
	| |		+-----+			      | |
	| | +--------------+	+-----------------+   | |
	| | |event handlers|	|prologue/epilogue|   | |
	| | +--------------+	+-----------------+   | |
	| |					      | |
	| | +-------+ --> code	+---------------+     | |
	| | |Drivers| --> stack |Threads,mm, ...|     | |
	| | +-------+ --> data  +---------------+     | |
	| |					      | |
	| +-------------------------------------------+ |
	|					     	|
	+-----------------------------------------------+

 - The kernel, an environment ?
 The kernel is an environment but it is somewhat particular.
  - The kernel is the env0 means its eid is 0.
  - env0 is never scheduled
  - env0 runs in both ring0 and ring1
  - env0 drivers are hardware drivers (others are software drivers)
  - env0 event handlers are used on critical event and sometimes
    on an event unhandled by the current env.

 - an env is identified by what we call an eid (eid_t).
   An eid is a 32 bits unsigned integer.


@ About the multi segmentation

 + Each env has its own ldt
 + For every env
  - code is in ldt
  - the stack is in ldt
  - private datas are in ldt
  - public (readonly) datas are in the gdt
 + For every driver
  - code is in gdt
  - stack is in ldt (possibly several ldts, one per driver instantiation)
  - private datas are in ldt (same as for stack)
  - public datas (readonly) are in the gdt

@ Dynamic code execution
 Which segment ?
  - a specific code and a stack segments could be allocated to handle it.
    They would be in env0's ldt.
  PROBLEM: a memcpy for every execution would be too painful from a performances
  standpoint and using the env0's ldt avoids use of the running env ldt.
  SOLUTIONS:
	- static allocation in the gdt
	- dynamically promote the dynamically compiled code buffer to a segment
	  in the gdt or in running env's ldt.
	The second solution appears to be the good one.

 @ Syscall arguments
  PROBLEM: if the kernel protects the others envs from itself by well bounded ldt's segments
  it raises the need of another mechanism to handle syscall parameters.
  SOLUTION: (temporary) the kernel ldt's segments cover the whole memory space and syscall
  arguments have to be linear memory address.
	- (to be explored) use up to two registers to store up to four segment selectors.
	  It means that the kernel syscalls are limited to 4 arguments.

TODO: explore the performance/security deal involved with those choices.
