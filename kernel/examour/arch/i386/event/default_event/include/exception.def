/*
** This file is part of exAmour

** Copyright (C) Remy Saissy <remy.saissy@epitech.net>
** exAmour is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.

** exAmour is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.

** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/

/* This file contains the exceptions for x86. */
/* The format of an entry is:  */
/*  EXCEPTION_ENTRY(id, type, code_seg, ring, handler) */
/* - id is one of the exception id macro set in exception.h */
/* - type is one of the gate_type_e defined in segment_enum.h but without */
/*   the leading gate_type_ */
/* - code_seg is the segment selector of the code segment of the exception */
/*   handler */
/* - handler is the exception handler */

/* TODO: add a distinction between abort/fault and trap exceptions. */

EXCEPTION_ENTRY(EXCEPTION_DIVIDE_ERROR, INTR_GATE_32BITS,
		GDT_SEG_KCODE,
		SEGMENT_PRIV_0, examour_do_exception_0)

EXCEPTION_ENTRY(EXCEPTION_DEBUG, INTR_GATE_32BITS,
		GDT_SEG_KCODE,
		SEGMENT_PRIV_0, examour_do_exception_1)

EXCEPTION_ENTRY(EXCEPTION_NMI_INTR, INTR_GATE_32BITS,
		GDT_SEG_KCODE,
		SEGMENT_PRIV_0, examour_do_exception_2)

EXCEPTION_ENTRY(EXCEPTION_BREAKPOINT, INTR_GATE_32BITS,
		GDT_SEG_KCODE,
		SEGMENT_PRIV_0, examour_do_exception_3)

EXCEPTION_ENTRY(EXCEPTION_OVERFLOW, INTR_GATE_32BITS,
		GDT_SEG_KCODE,
		SEGMENT_PRIV_0, examour_do_exception_4)

EXCEPTION_ENTRY(EXCEPTION_BOUND_EXCEED, INTR_GATE_32BITS,
		GDT_SEG_KCODE,
		SEGMENT_PRIV_0, examour_do_exception_5)

EXCEPTION_ENTRY(EXCEPTION_INVL_OPCODE, INTR_GATE_32BITS,
		GDT_SEG_KCODE,
		SEGMENT_PRIV_0, examour_do_exception_6)

EXCEPTION_ENTRY(EXCEPTION_DEV_NOT_AVL, INTR_GATE_32BITS,
		GDT_SEG_KCODE,
		SEGMENT_PRIV_0, examour_do_exception_7)

EXCEPTION_ENTRY(EXCEPTION_DOUBLE_FAULT, INTR_GATE_32BITS,
		GDT_SEG_KCODE,
		SEGMENT_PRIV_0, examour_do_exception_8)

EXCEPTION_ENTRY(EXCEPTION_COP_SEG_OVERRUN, INTR_GATE_32BITS,
		GDT_SEG_KCODE,
		SEGMENT_PRIV_0, examour_do_exception_9)

EXCEPTION_ENTRY(EXCEPTION_INVL_TSS, INTR_GATE_32BITS,
		GDT_SEG_KCODE,
		SEGMENT_PRIV_0, examour_do_exception_10)

EXCEPTION_ENTRY(EXCEPTION_SEGMENT_NOT_PRESENT, INTR_GATE_32BITS,
		GDT_SEG_KCODE,
		SEGMENT_PRIV_0, examour_do_exception_11)

EXCEPTION_ENTRY(EXCEPTION_STACK_FAULT, INTR_GATE_32BITS,
		GDT_SEG_KCODE,
		SEGMENT_PRIV_0, examour_do_exception_12)

EXCEPTION_ENTRY(EXCEPTION_GENERAL_PROTECTION, INTR_GATE_32BITS,
		GDT_SEG_KCODE,
		SEGMENT_PRIV_0, examour_do_exception_13)

EXCEPTION_ENTRY(EXCEPTION_PAGE_FAULT, INTR_GATE_32BITS,
		GDT_SEG_KCODE,
		SEGMENT_PRIV_0, examour_do_exception_14)

EXCEPTION_ENTRY(EXCEPTION_FPU_ERROR, INTR_GATE_32BITS,
		GDT_SEG_KCODE,
		SEGMENT_PRIV_0, examour_do_exception_16)

EXCEPTION_ENTRY(EXCEPTION_ALIGNMENT_CHECK, INTR_GATE_32BITS,
		GDT_SEG_KCODE,
		SEGMENT_PRIV_0, examour_do_exception_17)

EXCEPTION_ENTRY(EXCEPTION_MACHINE_CHECK, INTR_GATE_32BITS,
		GDT_SEG_KCODE,
		SEGMENT_PRIV_0, examour_do_exception_18)

EXCEPTION_ENTRY(EXCEPTION_SIMD_FPU, INTR_GATE_32BITS,
		GDT_SEG_KCODE,
		SEGMENT_PRIV_0, examour_do_exception_19)
