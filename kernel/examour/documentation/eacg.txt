		** exAmour's code generator component **

It is a quite simple two layers dynamic code generator component.
Its goals are:
 - Fast machine code generation;
 - Secure code generation (dynamic bytecode restrictions);
 - Language independant.

The combination of those three goals aims to develop a bytecode based
component in two layers.

@The backend:
The low level layer called backend is put inside the kernel and is
responsible of the machine code generation and execution.
This layer is aware about the bytecode and the restrictions
dynamically applied on it.
By restrictions we mean rules to exclude opcode from the set of
available code.

@The frontend:
The high level layer called frontend is put in userspace and is responsible
of the bytecode generation. It is not aware about the machine code and do
not rely on any language.
For the sake of simplicity the first backend will be a set of macros written
to be used in a C,C++ programs.

Ideally the frontend would be a library in order to allow easy development of
language frontends.

@Bytecode definition:
The most fundamental piece of the software is the bytecode, therefore the following
definition is quite important and will probably evolve as exAmour evolves.

Needs:
The bytecode needs to be quite simple in order to get a fast and efficient parsing.
Basic operations such as memory/register data manipulation and arithmetic are necessary.
Ability to call syscalls too.
Ability to call subroutines too.
Ability to manipulate data from the host environnment too since the handlers can be
quite important for the env. 
As an example, the prologue/epilogue of and env can be used to manage threading.
There is no fixed size stack instead, an opcode place at the beginning of each
routine defines the number of bytes necessary.
the number of registers is dependant of the physical architecture.
The size of a pointer/register is the same as the physical architecture.
(32bits for ia-32 32bits registers).

Opcode map synopsis:

opcode_number opcode_string argument_type_and_size opcode_definition

The arguments are:
r8	-> 8bits register
r16	-> 16bits register
r32	-> 32bits register
r64	-> 64bits register
r128	-> 128bits register
r	-> default machine size register
r*	-> any register size

m8	-> 8bits memory operand
m16	-> 16bits memory operand
m32	-> 32bits memory operand
m64	-> 64bits memory operand
m128	-> 128bits memory operand
m	-> default machine size memory operand
m*	-> any memory operand size

i8	-> 8bits immediate value
i16	-> 16bits immediate value
i32	-> 32bits immediate value
i64	-> 64bits immediate value
i128	-> 128bits immediate value
i	-> default machine size immediate value
i*	-> any immediate value size

when there is several operands, the following rule always applies:
 first operand is the source
 second operand is the destination or the second source if there is three operands
 third operand is the destination

To indicate that an operand is immediate/register or memory we use the three highest
order bits of the opcode byte. It leaves 31 possible opcodes.
The highest order bit is for the first operand;
The second highest order bit is for the second operand;
The third highest order bit is for the third operand.
When the bit is set, it indicates that the code will operate on the content
pointed to by the operand otherwise the operand is considered as the content
itself.

@Opcode map

0x0 set_label	i			Sets a new label in the code. It is used to define
					the start of a function as well as a label for jump.

0x1 stack_size  r8/i8			defines the size of the subroutine's stack

0x2 mov		r*/m*/i*, r*/m*		moves the content of the addresss in source in
					destination, if the source size if greater,
					there is a loss of information otherwise a zero
					extend is automatically performed.
0x3 add		r*/m*/i*, r*/m*/i*,r*/m* Adds the sources and put the result in the destination.

0x4 sub		r*/m*/i*, r*/m*/i*,r*/m* Subs the sources and put the result in the destination.

0x5 mul		r*/m*/i*, r*/m*/i*,r*/m* Adds the sources and put the result in the destination.

0x6 div		r*/m*/i*, r*/m*/i*,r*/m* Divs the sources and put the result in the destination.

0x7 mod		r*/m*/i*, r*/m*/i*,r*/m* Mods the sources and put the result in the destination.

0x8 call	r*/m*/i*		Call a subroutine. If source is immediate operand then
					it is a syscall.

0x9 ret					Return from subroutine.

0xa push	r*/m*/i*		Push a value onto the stack.

0xb pop		r*/m*			Pops a value from the stack.

0xc cmp		r*/m*/i*, r*/m*/i*	compare two operands.

0xd je		i			If the last instruction sets the equal flag jumps to label i
0xd jz		i			If the last instruction sets the zero flag jumps to label i

0xe jne		i			If the last instruction hasn't set the equal flag jumps to label i
0xe jnz		i			If the last instruction hasn't set the zero flag jumps to label i

0xf jlt		i			If the last comparison sets lower flag, jumps to label i

0x10 jgt	i			If the last comparison sets greater flag, jumps to label i

0x11 jlte	i			If the last comparison sets lower and equal flags, jumps to label i

0x12 jgte	i			If the last comparison sets greater and equal flags, jumps to label i

				
@ The status register
There is a status register.

@ operands encoding:
ia-32:

two bytes encoding:
 0x0 eax
 0x1 ebx
 0x3 ecx
 0x4 edx
 0x5 ebp
 0x6 esp
 0x7 esi
 0x8 edi
 0x9 eflags
 0xa ss
 0xb cs
 0xc ds
 0xd es
 0xe fs
 0xf gs

 /* fpu regs */

 /* mmx regs */

 /* sse regs */

/* TODO: add the list of the mmx, floating point and sse registers. */

the size to consider is indicated by using the three highest order bits.
000 -> 8bit
001 -> 16bit
010 -> 32bit
011 -> 64bit
100 -> 128bit


@Backend interface

bool	eacg_compile(eacg_t *buf);

bool	eacg_execute(eacg_t *buf);


@Frontend interface

This is the frontend interface for the C,C++ preprocessor
based implementation

bool	eacg_init(eacg_t *buf, uint32_t n_instr);

void	eacg_release(eacg_t *buf);

void	eacg_set_label(eacg_t *buf);

void	eacg_mov_r_r(eacg_t *buf, eacg_reg_t src, eacg_reg_t dst);

void	eacg_mov_r_m(eacg_t *buf, eacg_reg_t src, void *dst);

void	eacg_mov_m_m(eacg_t *buf, void *src, void *dst);

void	eacg_mov_m_r(eacg_t *buf, void *src, eacg_reg_t dst);

void	eacg_mov_i_r(eacg_t *buf, uint32_t src, eacg_reg_t dst);

void	eacg_mov_i_m(eacg_t *buf, uint32_t src, void *dst);

void	eacg_add_r_r_r(eacg_t *buf, eacg_reg_t src0, eacg_reg_t src1, eacg_reg_t dst);

void	eacg_add_r_r_m(eacg_t *buf, eacg_reg_t src0, eacg_reg_t src1, void *dst);

void	eacg_add_r_m_r(eacg_t *buf, eacg_reg_t src0, void *src1, eacg_reg_t dst);

void	eacg_add_r_m_m(eacg_t *buf, eacg_reg_t src0, void *src1, void *dst);

void	eacg_add_r_i_r(eacg_t *buf, eacg_reg_t src0, uint32_t src1, eacg_reg_t dst);

void	eacg_add_r_i_m(eacg_t *buf, eacg_reg_t src0, uint32_t src1, void *dst);

void	eacg_add_m_r_r(eacg_t *buf, void *src0, eacg_reg_t src1, eacg_reg_t dst);

void	eacg_add_m_r_m(eacg_t *buf, void *src0, eacg_reg_t src1, void *dst);

void	eacg_add_m_m_r(eacg_t *buf, void *src0, void *src1, eacg_reg_t dst);

void	eacg_add_m_m_m(eacg_t *buf, void *src0, void *src1, void *dst);

void	eacg_add_m_i_r(eacg_t *buf, void *src0, uint32_t src1, eacg_reg_t dst);

void	eacg_add_m_i_m(eacg_t *buf, void *src0, uint32_t src1, void *dst);

void	eacg_add_i_r_r(eacg_t *buf, uint32_t src0, eacg_reg_t src1, eacg_reg_t dst);

void	eacg_add_i_r_m(eacg_t *buf, uint32_t src0, eacg_reg_t src1, void *dst);

void	eacg_add_i_m_r(eacg_t *buf, uint32_t src0, void *src1, eacg_reg_t dst);

void	eacg_add_i_m_m(eacg_t *buf, uint32_t src0, void *src1, void *dst);

void	eacg_add_i_i_r(eacg_t *buf, uint32_t src0, uint32_t src1, eacg_reg_t dst);

void	eacg_add_i_i_m(eacg_t *buf, uint32_t src0, uint32_t src1, void *dst);

void	eacg_sub_r_r_r(eacg_t *buf, eacg_reg_t src0, eacg_reg_t src1, eacg_reg_t dst);

void	eacg_sub_r_r_m(eacg_t *buf, eacg_reg_t src0, eacg_reg_t src1, void *dst);

void	eacg_sub_r_m_r(eacg_t *buf, eacg_reg_t src0, void *src1, eacg_reg_t dst);

void	eacg_sub_r_m_m(eacg_t *buf, eacg_reg_t src0, void *src1, void *dst);

void	eacg_sub_r_i_r(eacg_t *buf, eacg_reg_t src0, uint32_t src1, eacg_reg_t dst);

void	eacg_sub_r_i_m(eacg_t *buf, eacg_reg_t src0, uint32_t src1, void *dst);

void	eacg_sub_m_r_r(eacg_t *buf, void *src0, eacg_reg_t src1, eacg_reg_t dst);

void	eacg_sub_m_r_m(eacg_t *buf, void *src0, eacg_reg_t src1, void *dst);

void	eacg_sub_m_m_r(eacg_t *buf, void *src0, void *src1, eacg_reg_t dst);

void	eacg_sub_m_m_m(eacg_t *buf, void *src0, void *src1, void *dst);

void	eacg_sub_m_i_r(eacg_t *buf, void *src0, uint32_t src1, eacg_reg_t dst);

void	eacg_sub_m_i_m(eacg_t *buf, void *src0, uint32_t src1, void *dst);

void	eacg_sub_i_r_r(eacg_t *buf, uint32_t src0, eacg_reg_t src1, eacg_reg_t dst);

void	eacg_sub_i_r_m(eacg_t *buf, uint32_t src0, eacg_reg_t src1, void *dst);

void	eacg_sub_i_m_r(eacg_t *buf, uint32_t src0, void *src1, eacg_reg_t dst);

void	eacg_sub_i_m_m(eacg_t *buf, uint32_t src0, void *src1, void *dst);

void	eacg_sub_i_i_r(eacg_t *buf, uint32_t src0, uint32_t src1, eacg_reg_t dst);

void	eacg_sub_i_i_m(eacg_t *buf, uint32_t src0, uint32_t src1, void *dst);

void	eacg_mul_r_r_r(eacg_t *buf, eacg_reg_t src0, eacg_reg_t src1, eacg_reg_t dst);

void	eacg_mul_r_r_m(eacg_t *buf, eacg_reg_t src0, eacg_reg_t src1, void *dst);

void	eacg_mul_r_m_r(eacg_t *buf, eacg_reg_t src0, void *src1, eacg_reg_t dst);

void	eacg_mul_r_m_m(eacg_t *buf, eacg_reg_t src0, void *src1, void *dst);

void	eacg_mul_r_i_r(eacg_t *buf, eacg_reg_t src0, uint32_t src1, eacg_reg_t dst);

void	eacg_mul_r_i_m(eacg_t *buf, eacg_reg_t src0, uint32_t src1, void *dst);

void	eacg_mul_m_r_r(eacg_t *buf, void *src0, eacg_reg_t src1, eacg_reg_t dst);

void	eacg_mul_m_r_m(eacg_t *buf, void *src0, eacg_reg_t src1, void *dst);

void	eacg_mul_m_m_r(eacg_t *buf, void *src0, void *src1, eacg_reg_t dst);

void	eacg_mul_m_m_m(eacg_t *buf, void *src0, void *src1, void *dst);

void	eacg_mul_m_i_r(eacg_t *buf, void *src0, uint32_t src1, eacg_reg_t dst);

void	eacg_mul_m_i_m(eacg_t *buf, void *src0, uint32_t src1, void *dst);

void	eacg_mul_i_r_r(eacg_t *buf, uint32_t src0, eacg_reg_t src1, eacg_reg_t dst);

void	eacg_mul_i_r_m(eacg_t *buf, uint32_t src0, eacg_reg_t src1, void *dst);

void	eacg_mul_i_m_r(eacg_t *buf, uint32_t src0, void *src1, eacg_reg_t dst);

void	eacg_mul_i_m_m(eacg_t *buf, uint32_t src0, void *src1, void *dst);

void	eacg_mul_i_i_r(eacg_t *buf, uint32_t src0, uint32_t src1, eacg_reg_t dst);

void	eacg_mul_i_i_m(eacg_t *buf, uint32_t src0, uint32_t src1, void *dst);

void	eacg_div_r_r_r(eacg_t *buf, eacg_reg_t src0, eacg_reg_t src1, eacg_reg_t dst);

void	eacg_div_r_r_m(eacg_t *buf, eacg_reg_t src0, eacg_reg_t src1, void *dst);

void	eacg_div_r_m_r(eacg_t *buf, eacg_reg_t src0, void *src1, eacg_reg_t dst);

void	eacg_div_r_m_m(eacg_t *buf, eacg_reg_t src0, void *src1, void *dst);

void	eacg_div_r_i_r(eacg_t *buf, eacg_reg_t src0, uint32_t src1, eacg_reg_t dst);

void	eacg_div_r_i_m(eacg_t *buf, eacg_reg_t src0, uint32_t src1, void *dst);

void	eacg_div_m_r_r(eacg_t *buf, void *src0, eacg_reg_t src1, eacg_reg_t dst);

void	eacg_div_m_r_m(eacg_t *buf, void *src0, eacg_reg_t src1, void *dst);

void	eacg_div_m_m_r(eacg_t *buf, void *src0, void *src1, eacg_reg_t dst);

void	eacg_div_m_m_m(eacg_t *buf, void *src0, void *src1, void *dst);

void	eacg_div_m_i_r(eacg_t *buf, void *src0, uint32_t src1, eacg_reg_t dst);

void	eacg_div_m_i_m(eacg_t *buf, void *src0, uint32_t src1, void *dst);

void	eacg_div_i_r_r(eacg_t *buf, uint32_t src0, eacg_reg_t src1, eacg_reg_t dst);

void	eacg_div_i_r_m(eacg_t *buf, uint32_t src0, eacg_reg_t src1, void *dst);

void	eacg_div_i_m_r(eacg_t *buf, uint32_t src0, void *src1, eacg_reg_t dst);

void	eacg_div_i_m_m(eacg_t *buf, uint32_t src0, void *src1, void *dst);

void	eacg_div_i_i_r(eacg_t *buf, uint32_t src0, uint32_t src1, eacg_reg_t dst);

void	eacg_div_i_i_m(eacg_t *buf, uint32_t src0, uint32_t src1, void *dst);

void	eacg_mod_r_r_r(eacg_t *buf, eacg_reg_t src0, eacg_reg_t src1, eacg_reg_t dst);

void	eacg_mod_r_r_m(eacg_t *buf, eacg_reg_t src0, eacg_reg_t src1, void *dst);

void	eacg_mod_r_m_r(eacg_t *buf, eacg_reg_t src0, void *src1, eacg_reg_t dst);

void	eacg_mod_r_m_m(eacg_t *buf, eacg_reg_t src0, void *src1, void *dst);

void	eacg_mod_r_i_r(eacg_t *buf, eacg_reg_t src0, uint32_t src1, eacg_reg_t dst);

void	eacg_mod_r_i_m(eacg_t *buf, eacg_reg_t src0, uint32_t src1, void *dst);

void	eacg_mod_m_r_r(eacg_t *buf, void *src0, eacg_reg_t src1, eacg_reg_t dst);

void	eacg_mod_m_r_m(eacg_t *buf, void *src0, eacg_reg_t src1, void *dst);

void	eacg_mod_m_m_r(eacg_t *buf, void *src0, void *src1, eacg_reg_t dst);

void	eacg_mod_m_m_m(eacg_t *buf, void *src0, void *src1, void *dst);

void	eacg_mod_m_i_r(eacg_t *buf, void *src0, uint32_t src1, eacg_reg_t dst);

void	eacg_mod_m_i_m(eacg_t *buf, void *src0, uint32_t src1, void *dst);

void	eacg_mod_i_r_r(eacg_t *buf, uint32_t src0, eacg_reg_t src1, eacg_reg_t dst);

void	eacg_mod_i_r_m(eacg_t *buf, uint32_t src0, eacg_reg_t src1, void *dst);

void	eacg_mod_i_m_r(eacg_t *buf, uint32_t src0, void *src1, eacg_reg_t dst);

void	eacg_mod_i_m_m(eacg_t *buf, uint32_t src0, void *src1, void *dst);

void	eacg_mod_i_i_r(eacg_t *buf, uint32_t src0, uint32_t src1, eacg_reg_t dst);

void	eacg_mod_i_i_m(eacg_t *buf, uint32_t src0, uint32_t src1, void *dst);

void	eacg_call_r(eacg_t *buf, eacg_reg_t src);

void	eacg_call_m(eacg_t *buf, void *src);

void	eacg_call_i(eacg_t *buf, uint32_t src);

void	eacg_ret(eacg_t *buf);

void	eacg_push_r(eacg_t *buf, eacg_reg_t src);

void	eacg_push_m(eacg_t *buf, void *src);

void	eacg_push_i(eacg_t *buf, uint32_t src);

void	eacg_pushi_r(eacg_t *buf, eacg_reg_t src);

void	eacg_pushi_m(eacg_t *buf, void *src);

void	eacg_pushi_i(eacg_t *buf, uint32_t src);

void	eacg_pop_r(eacg_t *buf, eacg_reg_t src);

void	eacg_popi_r(eacg_t *buf, eacg_reg_t src);

void	eacg_pop_m(eacg_t *buf, void *src);

void	eacg_cmp_r_r(eacg_t *buf, eacg_reg_t src, eacg_reg_t dst);

void	eacg_cmp_r_m(eacg_t *buf, eacg_reg_t src, void *dst);

void	eacg_cmp_r_i(eacg_t *buf, eacg_reg_t src, uint32_t dst);

void	eacg_cmp_m_r(eacg_t *buf, void *src, eacg_reg_t dst);

void	eacg_cmp_m_m(eacg_t *buf, void *src, void *dst);

void	eacg_cmp_m_i(eacg_t *buf, void *src, uint32_t dst);

void	eacg_cmp_i_r(eacg_t *buf, uint32_t src, eacg_reg_t dst);

void	eacg_cmp_i_m(eacg_t *buf, uint32_t src, void *dst);

void	eacg_cmp_i_i(eacg_t *buf, uint32_t src, uint32_t dst);

void	eacg_je(eacg_t *buf, uint32_t src);

void	eacg_jz(eacg_t *buf, uint32_t src);

void	eacg_jne(eacg_t *buf, uint32_t src);

void	eacg_jnz(eacg_t *buf, uint32_t src);

void	eacg_jgt(eacg_t *buf, uint32_t src);

void	eacg_jlt(eacg_t *buf, uint32_t src);

void	eacg_jlte(eacg_t *buf, uint32_t src);

void	eacg_jgte(eacg_t *buf, uint32_t src);
