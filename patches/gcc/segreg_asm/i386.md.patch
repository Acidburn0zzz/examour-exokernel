*** gcc-4.1.0/./gcc/config/i386/i386.md	2006-09-16 15:25:39.000000000 +0200
--- gcc-4.1.0-patch-segreg/./gcc/config/i386/i386.md	2006-09-28 13:38:09.000000000 +0200
***************
*** 269,282 ****
      (const_int 0)))
  
  ;; Set when string REP prefix is used.
! (define_attr "prefix_rep" "" 
    (if_then_else (and (eq_attr "unit" "sse") (eq_attr "mode" "SF,DF"))
      (const_int 1)
      (const_int 0)))
  
  ;; Set when 0f opcode prefix is used.
  (define_attr "prefix_0f" ""
!   (if_then_else 
      (ior (eq_attr "type" "imovx,setcc,icmov")
  	 (eq_attr "unit" "sse,mmx"))
      (const_int 1)
--- 269,282 ----
      (const_int 0)))
  
  ;; Set when string REP prefix is used.
! (define_attr "prefix_rep" ""
    (if_then_else (and (eq_attr "unit" "sse") (eq_attr "mode" "SF,DF"))
      (const_int 1)
      (const_int 0)))
  
  ;; Set when 0f opcode prefix is used.
  (define_attr "prefix_0f" ""
!   (if_then_else
      (ior (eq_attr "type" "imovx,setcc,icmov")
  	 (eq_attr "unit" "sse,mmx"))
      (const_int 1)
***************
*** 1132,1138 ****
    [(set_attr "type" "alu1")
     (set_attr "mode" "SI")
     (set_attr "length_immediate" "0")])
!  
  (define_insn "*movsi_or"
    [(set (match_operand:SI 0 "register_operand" "=r")
  	(match_operand:SI 1 "immediate_operand" "i"))
--- 1132,1138 ----
    [(set_attr "type" "alu1")
     (set_attr "mode" "SI")
     (set_attr "length_immediate" "0")])
! 
  (define_insn "*movsi_or"
    [(set (match_operand:SI 0 "register_operand" "=r")
  	(match_operand:SI 1 "immediate_operand" "i"))
***************
*** 1148,1153 ****
--- 1148,1202 ----
     (set_attr "mode" "SI")
     (set_attr "length_immediate" "1")])
  
+ 
+ ;;; MEGA MUF
+ 								
+ (define_insn "*set_seg_reg"
+   [(set (match_operand:HI 0 "segment_register_operand" "=z")
+ 	(match_operand:HI 1 "register_operand" "r"))
+   ]
+   ""
+ {
+   warning(0, "gcc/config/i386/i386.md:set_seg_reg---------------------------");
+   warning(0, "gcc/config/i386/i386.md:set_seg_reg---------------------------");
+   warning(0, "gcc/config/i386/i386.md:set_seg_reg---------------------------");
+   warning(0, "gcc/config/i386/i386.md:set_seg_reg---------------------------");
+   warning(0, "gcc/config/i386/i386.md:set_seg_reg---------------------------");
+   warning(0, "gcc/config/i386/i386.md:set_seg_reg---------------------------");
+   warning(0, "gcc/config/i386/i386.md:set_seg_reg---------------------------");
+   warning(0, "gcc/config/i386/i386.md:set_seg_reg---------------------------");
+   warning(0, "gcc/config/i386/i386.md:set_seg_reg---------------------------");
+   warning(0, "gcc/config/i386/i386.md:set_seg_reg---------------------------");
+   warning(0, "gcc/config/i386/i386.md:set_seg_reg---------------------------");
+   warning(0, "gcc/config/i386/i386.md:set_seg_reg---------------------------");
+   warning(0, "gcc/config/i386/i386.md:set_seg_reg---------------------------");
+   warning(0, "gcc/config/i386/i386.md:set_seg_reg---------------------------");
+   warning(0, "gcc/config/i386/i386.md:set_seg_reg---------------------------");
+   warning(0, "gcc/config/i386/i386.md:set_seg_reg---------------------------");
+   return "mov{w}\t{%1, %0|%0, %1}";
+ }
+   [(set_attr "mode" "HI")
+   (set_attr "unit" "integer")
+   (set_attr "type" "imov")
+   ]
+ )
+ 
+ ;; (define_insn "set_seg_reg"
+ ;;   [(set (match_operand:HI 0 "segment_register_operand" "")
+ ;; 	(match_operand:HI 1 "register_operand" ""))
+ ;;   ]
+ ;;   ""
+ ;;   "
+ ;;    mov{w}\t{%1, %0|%0, %1}
+ ;;    int 42"
+ ;;   [(set_attr "mode" "HI")
+ ;;   (set_attr "unit" "integer")
+ ;;   (set_attr "type" "imov")
+ ;;   ]
+ ;; )
+ 
+ ;;;
+ 								
  (define_insn "*movsi_1"
    [(set (match_operand:SI 0 "nonimmediate_operand"
  			"=r  ,m  ,*y,*y,?rm,?*y,*x,*x,?r,m ,?*Y,*x")
***************
*** 1291,1296 ****
--- 1340,1346 ----
  	(match_operand:HI 1 "general_operand" "r,rn,rm,rn"))]
    "GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM"
  {
+       warning(0, "gcc/config/i386/i386.md:*movhi_1 ------------------------------  op0: %d op1 %d", REGNO(operands[0]), REGNO(operands[1]));
    switch (get_attr_type (insn))
      {
      case TYPE_IMOVX:
***************
*** 1298,1307 ****
  	 though not as fast as an aligned movl.  */
        return "movz{wl|x}\t{%1, %k0|%k0, %1}";
      default:
        if (get_attr_mode (insn) == MODE_SI)
          return "mov{l}\t{%k1, %k0|%k0, %k1}";
        else
!         return "mov{w}\t{%1, %0|%0, %1}";
      }
  }
    [(set (attr "type")
--- 1348,1360 ----
  	 though not as fast as an aligned movl.  */
        return "movz{wl|x}\t{%1, %k0|%k0, %1}";
      default:
+ 
        if (get_attr_mode (insn) == MODE_SI)
          return "mov{l}\t{%k1, %k0|%k0, %k1}";
        else
!         {
! 	  return "mov{w}\t{%1, %0|%0, %1}";
! 	}
      }
  }
    [(set (attr "type")
